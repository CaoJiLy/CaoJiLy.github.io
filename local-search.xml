<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Docker快速入门</title>
    <link href="/2023/03/06/docker-study/"/>
    <url>/2023/03/06/docker-study/</url>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ol><li>镜像（Image）：相当于root文件系统。</li><li>容器（Container）：镜像和容器的关系，就像类和实例，镜像是静态定义，容器是镜像运行的实体，可以被创建、启动、停止、删除、暂停等。</li><li>仓库（Repository）：保存镜像</li></ol><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ol><li>卸载旧版本 <figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript">sudo yum remove docker <span class="hljs-string">\</span><br>              docker-client <span class="hljs-string">\</span><br>              docker-client-latest <span class="hljs-string">\</span><br>              docker-common <span class="hljs-string">\</span><br>              docker-latest <span class="hljs-string">\</span><br>              docker-latest-logrotate <span class="hljs-string">\</span><br>              docker-logrotate <span class="hljs-string">\</span><br>              docker-engine<br></code></pre></td></tr></table></figure></li><li>设置镜像仓库 <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo yum install -y yum-utils<br>sudo yum-config-manager \<br>    --add-repo \<br>    https:<span class="hljs-regexp">//</span>download.docker.com<span class="hljs-regexp">/linux/</span>centos/docker-ce.repo<br></code></pre></td></tr></table></figure></li><li>安装最新版本docker <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">sudo yum install docker-ce docker-ce-<span class="hljs-keyword">cli</span> containerd.io docker-buildx-<span class="hljs-keyword">plugin</span> docker-compose-<span class="hljs-keyword">plugin</span><br></code></pre></td></tr></table></figure> 启动docker <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">sudo systemctl <span class="hljs-literal">start</span> docker<br></code></pre></td></tr></table></figure> 检查docker是否安装成功 <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo docker <span class="hljs-built_in">run</span> hello-world<br></code></pre></td></tr></table></figure></li></ol><h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><h3 id="容器使用"><a href="#容器使用" class="headerlink" title="容器使用"></a>容器使用</h3><ol><li>运行交互式容器,使用exit 命令或者使用 CTRL+D 退出容器 <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -i -t ubuntu:<span class="hljs-number">15</span>.<span class="hljs-number">10</span> /bin/bash<br></code></pre></td></tr></table></figure><ul><li>-t 在容器中指定伪终端或终端</li><li>-i 允许你对容器内的标准输入 (STDIN) 进行交互。</li></ul></li><li>后台模式启动容器 <figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fsharp">docker run <span class="hljs-operator">-</span>d ubuntu<span class="hljs-operator">:</span>15.10 <span class="hljs-operator">/</span>bin<span class="hljs-operator">/</span>sh <span class="hljs-operator">-</span>c &quot;<span class="hljs-keyword">while</span> <span class="hljs-literal">true</span>; <span class="hljs-keyword">do</span> echo hello world; sleep 1; <span class="hljs-keyword">done</span>&quot;<br></code></pre></td></tr></table></figure></li></ol><h3 id="镜像使用"><a href="#镜像使用" class="headerlink" title="镜像使用"></a>镜像使用</h3><ol><li>docker images  列出本地镜像</li><li>docker pull 获取镜像</li><li>docker search 搜索镜像</li></ol><h2 id="构建web"><a href="#构建web" class="headerlink" title="构建web"></a>构建web</h2><ol><li><p>载入镜像</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull training/webapp<br></code></pre></td></tr></table></figure></li><li><p>运行web应用</p> <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">run</span><span class="language-bash"> -d -P training/webapp python app.py</span><br></code></pre></td></tr></table></figure><ul><li>-d 后台运行</li><li>-P 将容器内部使用的网络端口随机映射到我们使用的主机上</li></ul><p> 指定端口运行<br> <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -d -p <span class="hljs-number">8000</span>:<span class="hljs-number">5000</span> training/webapp python app.py<br></code></pre></td></tr></table></figure></p></li><li><p>查看web应用<br> 查看 Docker 的底层信息</p> <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> inspect <span class="hljs-variable">$&#123;docker_id&#125;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><pre><code class="hljs">`docker ps` 查看容器`docker logs` 查看容器内标准输出`docker logs -f` 像查看tail f输出容器内部到标准输出`docker stop` 停止容器`docker pull` 载入镜像`docker start` 启动停止到容器`docker restart` 重启容器`docker run -itd`  -d 参数默认不会进入容器，后台运行`docker exec -it $&#123;docker_id&#125; /bin/bash` 进入容器`docker export $&#123;docker_id&#125; &gt; ubuntu.tar` 导出容器`docker import` 导入容器快照`docker rm -f` 删除容器`docker inspect` 查看容器底层信息````````</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学点地理1</title>
    <link href="/2023/02/08/dili-study/"/>
    <url>/2023/02/08/dili-study/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>地理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速上手flask</title>
    <link href="/2023/02/02/flask-study/"/>
    <url>/2023/02/02/flask-study/</url>
    
    <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ol><li>进入项目根目录，构建虚拟环境，生成名称为venv的环境，可以看到生成了venv文件夹 <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">python3</span> -m venv venv <br></code></pre></td></tr></table></figure></li><li>激活虚拟环境(使用 <code>deactivate</code>退出虚拟环境) <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">. venv<span class="hljs-regexp">/bin/</span>activate<br></code></pre></td></tr></table></figure></li><li>安装flask, 遇到安装不了的情况可以尝试更换安装源 <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pipe <span class="hljs-keyword">install</span> flask<br></code></pre></td></tr></table></figure> 更换安装源 <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">pip install flask -i http:<span class="hljs-regexp">//</span>pypi.douban.com<span class="hljs-regexp">/simple/</span> --trusted-host pypi.douban.com<br></code></pre></td></tr></table></figure></li></ol><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><h3 id="1-依赖管理"><a href="#1-依赖管理" class="headerlink" title="1. 依赖管理"></a>1. 依赖管理</h3><p>requirement.txt<br>    * 安装文件中的依赖 <code>pip install -r requirements.txt</code><br>    * 环境中的依赖写入文件 <code>pip freeze &gt;requirements.txt</code></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">Flask</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">2.2</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2. 配置文件"></a>2. 配置文件</h3><p>config.py</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs ruby">import os<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Config</span>:<br>    <span class="hljs-variable constant_">SECRET_KEY</span> = os.environ.get(<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;hard to guess string&#x27;</span><br><br>    <span class="hljs-variable">@staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_app</span>(<span class="hljs-params">app</span>):<br>        pass<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DevelopmentConfig</span>(<span class="hljs-title class_">Config</span>):<br>    <span class="hljs-variable constant_">DEBUG</span> = <span class="hljs-title class_">True</span><br>    <span class="hljs-variable constant_">DB_URL</span> = <span class="hljs-string">&#x27;&#x27;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductConfig</span>(<span class="hljs-title class_">Config</span>):<br>    <span class="hljs-variable constant_">DB_URL</span> = <span class="hljs-string">&#x27;&#x27;</span><br><br><br>config = &#123;<br>    <span class="hljs-string">&#x27;development&#x27;</span>: <span class="hljs-title class_">DevelopmentConfig</span>,<br>    <span class="hljs-string">&#x27;production&#x27;</span>: <span class="hljs-title class_">ProductConfig</span>,<br>    <span class="hljs-string">&#x27;default&#x27;</span>: <span class="hljs-title class_">DevelopmentConfig</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-使用蓝图创建路由"><a href="#3-使用蓝图创建路由" class="headerlink" title="3. 使用蓝图创建路由"></a>3. 使用蓝图创建路由</h3><p>router.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Blueprint<br><br>user = Blueprint(<span class="hljs-string">&#x27;user&#x27;</span>, __name__)<br><br><br><span class="hljs-meta">@user.app_errorhandler(<span class="hljs-params"><span class="hljs-number">404</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">page_not_found</span>(<span class="hljs-params">e</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;404&#x27;</span>, <span class="hljs-number">404</span><br><br><br><span class="hljs-meta">@user.route(<span class="hljs-params"><span class="hljs-string">&#x27;/user/&lt;name&gt;&#x27;</span>, methods=[<span class="hljs-string">&#x27;get&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_name</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;name = &#123;name&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name=name)<br></code></pre></td></tr></table></figure><h3 id="4-入口文件"><a href="#4-入口文件" class="headerlink" title="4. 入口文件"></a>4. 入口文件</h3><p>flaskdemo.py</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">from flask import Flask<br>from config import config<br>from .userrouter import user<br>import os<br><br><br>def create<span class="hljs-constructor">_app(<span class="hljs-params">config_name</span>)</span>:<br>    app = <span class="hljs-constructor">Flask(<span class="hljs-params">__name__</span>)</span><br>    app.config.from<span class="hljs-constructor">_object(<span class="hljs-params">config</span>[<span class="hljs-params">config_name</span>])</span><br>    config<span class="hljs-literal">[<span class="hljs-identifier">config_name</span>]</span>.init<span class="hljs-constructor">_app(<span class="hljs-params">app</span>)</span><br>    app.register<span class="hljs-constructor">_blueprint(<span class="hljs-params">user</span>)</span><br>    return app<br><br>app = create<span class="hljs-constructor">_app(<span class="hljs-params">os</span>.<span class="hljs-params">getenv</span>(&#x27;FLASK_CONFIG&#x27;)</span> <span class="hljs-keyword">or</span> &#x27;default&#x27;)<br></code></pre></td></tr></table></figure><h3 id="5-运行应用"><a href="#5-运行应用" class="headerlink" title="5. 运行应用"></a>5. 运行应用</h3><p>启动服务，’0.0.0.0’ 使服务被外网访问到</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ <span class="hljs-built_in">export</span> <span class="hljs-attribute">FLASK_APP</span>=flaskdemo.py<br>$ <span class="hljs-built_in">export</span> <span class="hljs-attribute">FLASK_DEBUG</span>=1<br>$ flask <span class="hljs-built_in">run</span> -h <span class="hljs-string">&#x27;0.0.0.0&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="Docker部署"><a href="#Docker部署" class="headerlink" title="Docker部署"></a>Docker部署</h2><p>Flask自带的Web开发服务器不够稳健、安全和高效，不适合在生产环境中使用</p>]]></content>
    
    
    
    <tags>
      
      <tag>flask</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github博客搭建</title>
    <link href="/2023/02/01/blogcreate/"/>
    <url>/2023/02/01/blogcreate/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/02/01/hello-world/"/>
    <url>/2023/02/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
